<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hahn.Web</name>
    </assembly>
    <members>
        <member name="T:Hahn.Web.Controllers.AssetController">
            <summary>
            Defines the <see cref="T:Hahn.Web.Controllers.AssetController" />.
            </summary>
        </member>
        <member name="M:Hahn.Web.Controllers.AssetController.#ctor(Hahn.Data.Repositories.IUnitOfWork,Hahn.Web.Log.ILogManager,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Hahn.Web.Controllers.AssetController"/> class.
            </summary>
            <param name="unitOfWork">The unitOfWork <see cref="T:Hahn.Data.Repositories.IUnitOfWork"/>.</param>
            <param name="log">The log manager <see cref="T:Hahn.Web.Log.ILogManager"/>.</param>
            <param name="localizer">The localizer <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer"/>.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.AssetController.GetValidationResultDto(FluentValidation.Results.ValidationResult)">
            <summary>
            Converts a ValidationResult to ValidationResultDto.
            </summary>
            <param name="result">The <see cref="T:FluentValidation.Results.ValidationResult"/>.</param>
            <returns>The <see cref="T:Hahn.Web.Dtos.ValidationResultDto"/>.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.AssetController.IsValidAssetId(System.Int32)">
            <summary>
            Validates if Id property is not null.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.AssetController.IsValidAssetName(System.String)">
            <summary>
            Validates if AssetName property is not null and at least has 5 characters.
            </summary>
            <param name="assetName">The asset name.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.AssetController.IsValidAssetDepartment(System.Int32)">
            <summary>
            Validates if the Department property is a valid enum value (0 - 4).
            </summary>
            <param name="department">The department value.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.AssetController.IsValidAssetEmailAddress(System.String)">
            <summary>
            Check if the email address is a valid email.
            </summary>
            <param name="email">The email.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.AssetController.IsValidAssetDate(System.DateTime)">
            <summary>
            Check if the date isn't older than a year.
            </summary>
            <param name="date" example="2019-05-20T08:42:00Z">The date.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.AssetController.IsValidAssetBroken(System.Boolean)">
            <summary>
            Validates if Broken property is not null.
            </summary>
            <param name="broken">The broken.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.AssetController.IsValidAssetCountry(System.String)">
            <summary>
            Validates a country name using the restcountries.eu API.
            </summary>
            <param name="country">The country.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.AssetController.ValidateAsync(Hahn.Web.Dtos.AssetDto)">
            <summary>
            Validates all properties of properties of an AssetDto object.
            </summary>
            <param name="dto">The <see cref="T:Hahn.Web.Dtos.AssetDto"/>.</param>
        </member>
        <member name="T:Hahn.Web.Controllers.BaseApiController`2">
            <summary>
            Defines the <see cref="T:Hahn.Web.Controllers.BaseApiController`2" />.
            </summary>
            <typeparam name="TEntity">The Entity type from Domain.</typeparam>
            <typeparam name="TDto">The DataTable Object (DTO) that avoids to expose sensitive properties from domain.</typeparam>
        </member>
        <member name="P:Hahn.Web.Controllers.BaseApiController`2.Log">
            <summary>
            The LogManager property.
            </summary>
        </member>
        <member name="P:Hahn.Web.Controllers.BaseApiController`2.UnitOfWork">
            <summary>
            The UnitOfWork property.
            </summary>
        </member>
        <member name="P:Hahn.Web.Controllers.BaseApiController`2.Localizer">
            <summary>
            The Localizer property.
            </summary>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.#ctor(Hahn.Data.Repositories.IUnitOfWork,Hahn.Web.Log.ILogManager,Microsoft.Extensions.Localization.IStringLocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Hahn.Web.Controllers.BaseApiController`2"/> class.
            </summary>
            <param name="unitOfWork">The unitOfWork <see cref="T:Hahn.Data.Repositories.IUnitOfWork"/>.</param>
            <param name="log">The log manager <see cref="T:Hahn.Web.Log.ILogManager"/>.</param>
            <param name="localizer">The localizer <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer"/>.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.All(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a list of DTO.
            </summary>
            <param name="orderBy" example="Id;Desc">The orderBy use a property name, and optionally a code like ASC or DESC, separated by semicolon. Example: Id;Desc.</param>
            <param name="pageNumber" example="1">The page number to return a paged list.</param>
            <param name="pageSize" example="10">The page size to return a paged list.</param>
            <returns>Returns a <see cref="T:Hahn.Data.Pagination.PagedList`1"/>.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.OnGetAll(System.String,System.Int32,System.Int32)">
            <summary>
            A virtual method that gets all the DTO.
            </summary>
            <param name="orderBy">The orderBy use a property name, and optionally a code like ASC or DESC, separated by semicolon. Example: Id;Desc.</param>
            <param name="pageNumber">The page number to return a paged list.</param>
            <param name="pageSize">The page size to return a paged list.</param>
            <returns>The <see cref="T:Hahn.Data.Pagination.PagedList`1"/>.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.Get(System.Int32)">
            <summary>
            The Get method.
            </summary>
            <param name="id" example="1">The Id of the entity that is requesting.</param>
            <returns>The <see cref="!:TDto"/>.</returns>
            <response code="200">Entity found.</response>
            <response code="404">Entity not found.</response>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.OnGetting(System.Int32)">
            <summary>
            A virtual method that gets the entity.
            </summary>
            <param name="id">The Id of the entity that is requesting.</param>
            <returns>The <see cref="!:TDto"/>.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.Put(`1)">
            <summary>
            The Put method.
            </summary>
            <param name="dto">The object <see cref="!:TDto"/> that represents the updated object.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <response code="200">Entity updated.</response>
            <response code="400">Entity not found or the Request Body is invalid.</response>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.OnPuting(`1)">
            <summary>
            A virtual method that update the old entity.
            </summary>
            <param name="dto">The object <see cref="!:TDto"/> that represents the updated object.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.Post(`1)">
            <summary>
            The Post method.
            </summary>
            <param name="dto">The new <see cref="!:TDto"/> that will be saved.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <response code="201">Entity created. The new entity Url is passed in the 'location' header.</response>
            <response code="400">Found another entity with same Id or the Request Body is invalid.</response>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.OnPosting(`1)">
            <summary>
            A virtual method that adapt the Dto to an Entity.
            </summary>
            <param name="dto">The dto<see cref="!:TDto"/>.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.Delete(System.Int32)">
            <summary>
            The Delete method.
            </summary>
            <param name="id" example="1">The Id of the entity that is deleting.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <response code="200">Entity deleted.</response>
            <response code="404">Entity not found.</response>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.OnDeleting(System.Int32)">
            <summary>
            A virtual method that gets the entity to be deleted.
            </summary>
            <param name="id">The id<see cref="T:System.Int32"/>.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.Exists(System.Int32)">
            <summary>
            The Exists.
            </summary>
            <param name="id">The Id of the entity that is deleting.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.Exists(`1)">
            <summary>
            Check if exist an <see cref="!:TEntity"/> with the same Id as the <see cref="!:TDto"/>.
            </summary>
            <param name="dto">The dto.</param>
            <returns>Returns true if the Entity exists, false otherwise.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.ProcessPagedListHeader``1(Hahn.Data.Pagination.PagedList{``0},System.String)">
            <summary>
            Process a <see cref="T:Hahn.Data.Pagination.PagedList`1"/> and add info to the X-Pagination Header.
            </summary>
            <typeparam name="T">.</typeparam>
            <param name="list">The <see cref="T:Hahn.Data.Pagination.PagedList`1"/>.</param>
            <param name="key">The key to identify that allows to handle several PagedList info from the headers.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.Adapt(`0)">
            <summary>
            Convert an <see cref="!:TEntity"/> to a <see cref="!:TDto"/>.
            </summary>
            <param name="entity">The <see cref="!:TEntity"/>.</param>
            <returns>The <see cref="!:TDto"/>.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.Adapt(`1)">
            <summary>
            Convert an <see cref="!:TDto"/> to a <see cref="!:TEntity"/>.
            </summary>
            <param name="dto">The <see cref="!:TDto"/>.</param>
            <returns>The <see cref="!:TEntity"/>.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.Adapt(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a <see cref="!:TEntity"/> array.
            </summary>
            <param name="dtos">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.Adapt(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a <see cref="!:TDto"/> array.
            </summary>
            <param name="entities">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.ValidateAsync(`1)">
            <summary>
            An abstract method to validates the Dto before Put or Post.
            </summary>
            <param name="dto">The dto<see cref="!:TDto"/>.</param>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.IsNull(`1)">
            <summary>
            Check if the Dto if null.
            </summary>
            <param name="dto">The dto<see cref="!:TDto"/>.</param>
            <returns>Returs true if it is null.</returns>
        </member>
        <member name="M:Hahn.Web.Controllers.BaseApiController`2.GetBaseUrl">
            <summary>
            Get the BaseUrl from the request.
            </summary>
        </member>
        <member name="T:Hahn.Web.Extensions.StartupExtensions">
            <summary>
            Defines the <see cref="T:Hahn.Web.Extensions.StartupExtensions" />.
            </summary>
        </member>
        <member name="M:Hahn.Web.Extensions.StartupExtensions.ConfigureMapster">
            <summary>
            The Configure Mapster with FastExpressionCompiler.
            </summary>
        </member>
        <member name="M:Hahn.Web.Extensions.StartupExtensions.ConfigureInMemoryDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure service to use InMemory Server.
            </summary>
            <param name="services">.</param>
        </member>
        <member name="M:Hahn.Web.Extensions.StartupExtensions.ConfigureSwaggerGen(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure Swagger service.
            </summary>
            <param name="services">.</param>
        </member>
        <member name="M:Hahn.Web.Extensions.StartupExtensions.ConfigureJsonTranslations(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add Json translation capabilities.
            </summary>
            <param name="services">.</param>
            <param name="configuration">.</param>
        </member>
        <member name="M:Hahn.Web.Extensions.StartupExtensions.ConfigureValidators(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure validators.
            </summary>
            <param name="services">.</param>
        </member>
        <member name="M:Hahn.Web.Extensions.StartupExtensions.UseCustomExceptionMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configure the custom exception middleware.
            </summary>
            <param name="app">The app<see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>.</param>
        </member>
        <member name="M:Hahn.Web.Extensions.StartupExtensions.SeedDbContext(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Seed the Db.
            </summary>
            <param name="app">.</param>
        </member>
        <member name="M:Hahn.Web.Extensions.StartupExtensions.ConfigureLoggerService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the logger service.
            </summary>
            <param name="services">The services<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
        </member>
        <member name="M:Hahn.Web.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Hahn.Web.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">The IApplicationBuilder.</param>
            <param name="env">The IWebHostEnvironment.</param>
        </member>
    </members>
</doc>
